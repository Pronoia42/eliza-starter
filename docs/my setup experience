## My setup experience using WSL on windows

## 1. Connecting to WSL
First, open your preferred terminal application (such as Cursor, Windows Terminal, or cod editor) and connect to your WSL (Windows Subsystem for Linux) environment. WSL allows you to run a Linux distribution directly on Windows, providing a seamless integration for development tools and environments.

  Using Extensions for WSL
If you're using Visual Studio Code or another editor that supports WSL extensions, you can enhance your experience by installing specific extensions designed to improve your workflow. Search WSL and Remote Development and install both. Here’s how to set them up and what they do:

WSL Extension for Visual Studio Code The Remote - WSL extension allows you to open a Linux environment directly from Visual Studio Code. It integrates with WSL, enabling you to work within your Linux environment as if you were using a native Linux editor.

A)  Go to the Extensions view by clicking on the Extensions icon on the Activity Bar.
Search for Remote - WSL and click Install.
(I installed a bunch not sure what I actually use and when)
After installation, open a folder inside WSL by clicking on Remote Explorer in the left sidebar and selecting connect to wsl. This will reopen your code editor inside a virtual machine. 

You can open an integrated terminal that runs directly in your WSL environment. This allows you to use Linux-based commands, manage packages, and run your project—all from the same terminal window inside VSCode.

You can find the WSL folder directory in Linux/Ubuntu/root







## 2. Open cursor and then connect to WSL
Check dependencies are installed and up to date.

Run the following command to ensure your package list is up to date:
   sudo apt update
It does not install or upgrade any packages; it simply refreshes the information about what is available. (can run it anytime)
usercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash


To see if you already have NVM, Node.js pnpm and python installed check the installed version, run the following commands:

    nvm -v              (Should return 0.40.1 or greater)
    node -v             (Should return v22.12.0 or greater)
    pnpmn -v            (Should return 9.15.0 or greater)
    python -version     (Should return 3.12.3 or greater)

## 3. If not installed make sure to enter root directory and then install 
use: pwd    (return /root)
use: npm install -g pnpm

To install or update nvm, you should run the install script. To do that, you may either download and run the script manually, or use the following cURL or Wget command:
    curl -o- https://raw.github
## 4. I had an issue with playwright being a depreciated version.
To fix this I made sure I was in my project file and used:
         pnpm add playwright
then use: pnpm i to rerun install, if everything is installed without issue or warning it should return:
Lockfile is up to date, resolution step is skipped
Already up to date
Done in 4s
